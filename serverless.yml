service: task-management-api

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-west-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.tasksTableName}

custom:
  tasksTableName: tasks-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getTaskByTaskId:
    handler: api.getTaskByTaskId
    name: get-task-by-task-id
    memorySize: 128 # mb
    timeout: 5 #seconds
    events:
      - http:
          path: task/{taskId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt TasksTable.Arn

  # getTaskByMemberId:
  #   handler: api.getTaskByMemberId
  #   name: get-task-by-member-id
  #   memorySize: 128 # mb
  #   timeout: 5 #seconds
  #   events:
  #     - http:
  #         path: task/member/{memberId}
  #         method: GET
  #   iamRoleStatements:
  #     - Effect: "Allow"
  #       Action:
  #         - "dynamodb:GetItem"
  #       Resource: !GetAtt TasksTable.Arn

  getAllTasksByMember:
    handler: api.getAllTasksByMember
    name: get-all-task-by-member-id
    memorySize: 128 # mb
    timeout: 5 #seconds
    events:
      - http:
          path: task/member/{memberId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt TasksTable.Arn

  createTask:
    handler: api.createTask
    name: create-task
    memorySize: 128 # mb
    timeout: 5 #seconds
    events:
      - http:
          path: task
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt TasksTable.Arn

  updateTask:
    handler: api.updateTask
    name: update-task
    memorySize: 128 # mb
    timeout: 5 #seconds
    events:
      - http:
          path: task/{taskId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource: !GetAtt TasksTable.Arn

  assignTask:
    handler: api.assignTask
    name: assign-task
    memorySize: 128 # mb
    timeout: 5 #seconds
    events:
      - http:
          path: task/{taskId}/assign/{memberId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt TasksTable.Arn
      
  acceptTask:
    handler: api.acceptTask
    name: accept-task
    memorySize: 128 # mb
    timeout: 5 #seconds
    events:
      - http:
          path: task/{taskId}/accept/{memberId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource: !GetAtt TasksTable.Arn

  completeTask:
      handler: api.completeTask
      name: complete-task
      memorySize: 128 # mb
      timeout: 5 #seconds
      events:
        - http:
            path: task/{taskId}/complete/{memberId}
            method: PUT
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "dynamodb:UpdateItem"
            - "dynamodb:GetItem"
          Resource: !GetAtt TasksTable.Arn

  closeTask:
      handler: api.closeTask
      name: close-task
      memorySize: 128 # mb
      timeout: 5 #seconds
      events:
        - http:
            path: task/{taskId}/close/{memberId}
            method: PUT
      iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "dynamodb:UpdateItem"
            - "dynamodb:GetItem"
          Resource: !GetAtt TasksTable.Arn

  deleteTask:
    handler: api.deleteTask
    name: delete-task
    memorySize: 128 # mb
    timeout: 5 #seconds
    events:
      - http:
          path: task/{taskId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt TasksTable.Arn


resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tasksTableName}
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: N
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1